1. JUNIT : Unit means piece of code, can be method or group of methods that we will test
2. Best practices :
    - Meaningful names
    - Verify only One test condition per test case

3. @Before : Some common stuff required to run before every test case.
             Used if we want to do some kind of setup before test case

4. @After : Runs method after evry test case :
          : Used for any kind of free up or teardown operations

5. @BeforeClass : Operatio ns that need to perform only once at class level and not before every test method.
                : As class level, therefor should be static

6. Array Comparison : assertEquals() always check for object references for array comparison
                      To solve this, use assertArraysEquals()

7. assertArraysEquals() : to compare values of 2 arrays

8. Testing exceptions : @Test(expected = NullPointerException.class)

9. Performance testing :  @Test(timeout = 1000)

10. Parameterized Tests :
    -------------------
    Step 1: Make class as parameterized class : @RunWith(Parameterized.class)
    Step 2 : Create collection of input, output parameters
                 @Parameters
                    public static Collection<String[]> testConditions() {
                       String expectedOutputs[][] = {
                               {"AACD", "CD"},
                               {"ACD", "CD"}
                       };
                       return Arrays.asList(expectedOutputs);
                    }
    This will internally call Constructor of class with 2 params (input and output), that will be set at a class level

                       private String input;
                        private String output;

                        public StringHelperParameterizedTest(String input, String output) {
                            this.input = input;
                            this.output = output;
                        }

    Step 3 : Use these class level params in your test case

                @Test
                public void test_truncateAInFirst2Positions() {
                    assertEquals(
                            output,
                            stringHelper.truncateAInFirst2Positions(input)
                    );
                }

11. Requirement : Say we have 4 test classes and we want to run only 3 test classes. We can achieve this using Junit suits
    -----------

    Test suite : Group of test classes that we want to execute in a single shot

        @RunWith(Suite.class)
        @Suite.SuiteClasses({ArraysCompareTest.class, StringHelperTest.class})
        public class TestSuite_one {
        }

